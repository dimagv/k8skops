apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{.name}}.{{.dnsZone}}
spec:
  kubelet:
    anonymousAuth: false
    authenticationTokenWebhook: true
    authorizationMode: Webhook
  additionalPolicies:
    node: |
      [
        {
          "Effect": "Allow",
          "Action": [
            "sts:AssumeRole"
          ],
          "Resource": [
            "arn:aws:iam::{{.awsAccountID}}:role/k8s-*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeTags",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:TerminateInstanceInAutoScalingGroup"
          ],
          "Resource": "*"
        }
      ]
  api:
    dns: {}
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{.s3bucket}}/{{.name}}.{{.dnsZone}}
  dnsZone: {{.dnsZone}}
  etcdClusters:
  - etcdMembers:
    - instanceGroup: master-{{.awsRegion}}a
      name: a
    name: main
  - etcdMembers:
    - instanceGroup: master-{{.awsRegion}}a
      name: a
    name: events
  iam:
    allowContainerRegistry: true
    legacy: false
  kubeAPIServer:
    auditLogPath: /var/log/kube-apiserver-audit.log
    auditLogFormat: json
    auditLogMaxAge: 10
    auditLogMaxBackups: 1
    auditLogMaxSize: 100
    auditPolicyFile: /srv/kubernetes/audit.yaml
    authorizationMode: Node,RBAC
    enableAdmissionPlugins:
    # - DenyEscalatingExec
    # - PodSecurityPolicy
    - Initializers
    - NamespaceLifecycle
    - LimitRanger
    - ServiceAccount
    - PersistentVolumeLabel
    - DefaultStorageClass
    - DefaultTolerationSeconds
    - MutatingAdmissionWebhook
    - ValidatingAdmissionWebhook
    - NodeRestriction
    - ResourceQuota
    - PersistentVolumeClaimResize
    - AlwaysPullImages
    anonymousAuth: false
    featureGates:
      ExpandPersistentVolumes: "true"
    oidcClientID: insurancetruck-app
    oidcIssuerURL: https://dex.{{.dnsZone}}
    oidcUsernameClaim: name
    oidcGroupsClaim: groups
  kubeControllerManager:
    featureGates:
      ExpandPersistentVolumes: "true"
  kubernetesApiAccess:
  - 0.0.0.0/0
  kubernetesVersion: 1.10.3
  masterInternalName: api.internal.{{.name}}.{{.dnsZone}}
  masterPublicName: api.{{.name}}.{{.dnsZone}}
  networkCIDR: 172.20.0.0/16
  networking:
    calico: {}
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
  - 0.0.0.0/0
  subnets:
  - cidr: 172.20.32.0/19
    name: {{.awsRegion}}a
    type: Public
    zone: {{.awsRegion}}a
  - cidr: 172.20.64.0/19
    name: {{.awsRegion}}b
    type: Public
    zone: {{.awsRegion}}b
  - cidr: 172.20.96.0/19
    name: {{.awsRegion}}c
    type: Public
    zone: {{.awsRegion}}c
  topology:
    dns:
      type: Public
    masters: public
    nodes: public
  fileAssets:
    - name: audit.yaml
      path: /srv/kubernetes/audit.yaml
      roles: [Master]
      content: |
        apiVersion: audit.k8s.io/v1beta1 # This is required.
        kind: Policy
        # Don't generate audit events for all requests in RequestReceived stage.
        omitStages:
          - "RequestReceived"
        rules:
          # Log pod changes at RequestResponse level
          - level: RequestResponse
            resources:
            - group: ""
              # Resource "pods" doesn't match requests to any subresource of pods,
              # which is consistent with the RBAC policy.
              resources: ["pods"]
          # Log "pods/log", "pods/status" at Metadata level
          - level: Metadata
            resources:
            - group: ""
              resources: ["pods/log", "pods/status"]

          # Don't log requests to a configmap called "controller-leader"
          - level: None
            resources:
            - group: ""
              resources: ["configmaps"]
              resourceNames: ["controller-leader"]

          # Don't log watch requests by the "system:kube-proxy" on endpoints or services
          - level: None
            users: ["system:kube-proxy"]
            verbs: ["watch"]
            resources:
            - group: "" # core API group
              resources: ["endpoints", "services"]

          # Don't log authenticated requests to certain non-resource URL paths.
          - level: None
            userGroups: ["system:authenticated"]
            nonResourceURLs:
            - "/api*" # Wildcard matching.
            - "/version"

          # Log the request body of configmap changes in kube-system.
          - level: Request
            resources:
            - group: "" # core API group
              resources: ["configmaps"]
            # This rule only applies to resources in the "kube-system" namespace.
            # The empty string "" can be used to select non-namespaced resources.
            namespaces: ["kube-system"]

          # Log configmap and secret changes in all other namespaces at the Metadata level.
          - level: Metadata
            resources:
            - group: "" # core API group
              resources: ["secrets", "configmaps"]

          # Log all other resources in core and extensions at the Request level.
          - level: Request
            resources:
            - group: "" # core API group
            - group: "extensions" # Version of group should NOT be included.

          # A catch-all rule to log all other requests at the Metadata level.
          - level: Metadata
            # Long-running requests like watches that fall under this rule will not
            # generate an audit event in RequestReceived.
            omitStages:
              - "RequestReceived"

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
  name: master-{{.awsRegion}}a
spec:
  image: {{.masterImage}}
  machineType: {{.masterMachineType}}
  maxSize: {{.masterMaxSize}}
  minSize: {{.masterMinSize}}
  nodeLabels:
    kops.k8s.io/instancegroup: master-{{.awsRegion}}a
  role: Master
  rootVolumeSize: {{.masterRootVolumeSize}}
  subnets:
  - {{.awsRegion}}a

{{if .multiMaster}}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
  name: master-{{.awsRegion}}b
spec:
  image: {{.masterImage}}
  machineType: {{.masterMachineType}}
  maxSize: {{.masterMaxSize}}
  minSize: {{.masterMinSize}}
  nodeLabels:
    kops.k8s.io/instancegroup: master-{{.awsRegion}}b
  role: Master
  rootVolumeSize: {{.masterRootVolumeSize}}
  subnets:
  - {{.awsRegion}}b

{{end}}
{{if .multiMaster}}
---
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
  name: master-{{.awsRegion}}c
spec:
  image: {{.masterImage}}
  machineType: {{.masterMachineType}}
  maxSize: {{.masterMaxSize}}
  minSize: {{.masterMinSize}}
  nodeLabels:
    kops.k8s.io/instancegroup: master-{{.awsRegion}}c
  role: Master
  rootVolumeSize: {{.masterRootVolumeSize}}
  subnets:
  - {{.awsRegion}}c

{{end}}
---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
  name: nodes-{{.awsRegion}}a
spec:
  image: {{.nodeImage}}
  machineType: {{.nodeMachineType}}
  maxSize: {{.nodeMaxSize}}
  minSize: {{.nodeMixSize}}
  nodeLabels:
    kops.k8s.io/instancegroup: nodes-{{.awsRegion}}a
  role: Node
  rootVolumeSize: {{.nodeRootVolumeSize}}
  subnets:
  - {{.awsRegion}}a
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: 1
    kubernetes.io/cluster/{{.name}}.{{.dnsZone}}: ""

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
  name: nodes-{{.awsRegion}}b
spec:
  image: {{.nodeImage}}
  machineType: {{.nodeMachineType}}
  maxSize: {{.nodeMaxSize}}
  minSize: {{.nodeMixSize}}
  nodeLabels:
    kops.k8s.io/instancegroup: nodes-{{.awsRegion}}b
  role: Node
  rootVolumeSize: {{.nodeRootVolumeSize}}
  subnets:
  - {{.awsRegion}}b
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: 1
    kubernetes.io/cluster/{{.name}}.{{.dnsZone}}: ""

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
  name: nodes-{{.awsRegion}}c
spec:
  image: {{.nodeImage}}
  machineType: {{.nodeMachineType}}
  maxSize: {{.nodeMaxSize}}
  minSize: {{.nodeMixSize}}
  nodeLabels:
    kops.k8s.io/instancegroup: nodes-{{.awsRegion}}c
  role: Node
  rootVolumeSize: {{.nodeRootVolumeSize}}
  subnets:
  - {{.awsRegion}}c
  cloudLabels:
    k8s.io/cluster-autoscaler/enabled: 1
    kubernetes.io/cluster/{{.name}}.{{.dnsZone}}: ""

---

apiVersion: kops/v1alpha2
kind: SSHCredential
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
spec:
  publicKey: {{.publicKey}}