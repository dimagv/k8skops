apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{.name}}.{{.dnsZone}}
spec:
  # kubelet:
  #   anonymousAuth: false
  additionalPolicies:
    node: |
      [
        {
          "Effect": "Allow",
          "Action": [
            "sts:AssumeRole"
          ],
          "Resource": [
            "arn:aws:iam::{{.awsAccountID}}:role/k8s-*"
          ]
        }
      ]
  api:
    dns: {}
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{.s3bucket}}/{{.name}}.{{.dnsZone}}
  dnsZone: {{.dnsZone}}
  etcdClusters:
  - etcdMembers:
    - instanceGroup: master-{{.awsRegion}}a
      name: a
    name: main
  - etcdMembers:
    - instanceGroup: master-{{.awsRegion}}a
      name: a
    name: events
  iam:
    allowContainerRegistry: true
    legacy: false
  kubeAPIServer:
    featureGates:
      ExpandPersistentVolumes: "true"
    oidcClientID: insurancetruck-app
    oidcIssuerURL: https://dex.{{.dnsZone}}
    oidcUsernameClaim: name
  kubeControllerManager:
    featureGates:
      ExpandPersistentVolumes: "true"
  kubernetesApiAccess:
  - 0.0.0.0/0
  kubernetesVersion: 1.10.3
  masterInternalName: api.internal.{{.name}}.{{.dnsZone}}
  masterPublicName: api.{{.name}}.{{.dnsZone}}
  networkCIDR: 172.20.0.0/16
  networking:
    calico: {}
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
  - 0.0.0.0/0
  subnets:
  - cidr: 172.20.32.0/19
    name: {{.awsRegion}}a
    type: Public
    zone: {{.awsRegion}}a
  - cidr: 172.20.64.0/19
    name: {{.awsRegion}}b
    type: Public
    zone: {{.awsRegion}}b
  - cidr: 172.20.96.0/19
    name: {{.awsRegion}}c
    type: Public
    zone: {{.awsRegion}}c
  topology:
    dns:
      type: Public
    masters: public
    nodes: public

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
  name: master-{{.awsRegion}}a
spec:
  image: {{.masterImage}}
  machineType: {{.masterMachineType}}
  maxSize: {{.masterMaxSize}}
  minSize: {{.masterMinSize}}
  nodeLabels:
    kops.k8s.io/instancegroup: master-{{.awsRegion}}a
  role: Master
  rootVolumeSize: {{.masterRootVolumeSize}}
  subnets:
  - {{.awsRegion}}a

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
  name: nodes
spec:
  image: {{.nodeImage}}
  machineType: {{.nodeMachineType}}
  maxSize: {{.nodeMaxSize}}
  minSize: {{.nodeMixSize}}
  nodeLabels:
    kops.k8s.io/instancegroup: nodes
  role: Node
  rootVolumeSize: {{.nodeRootVolumeSize}}
  subnets:
  - {{.awsRegion}}a
  - {{.awsRegion}}b
  - {{.awsRegion}}c

---

apiVersion: kops/v1alpha2
kind: SSHCredential
metadata:
  labels:
    kops.k8s.io/cluster: {{.name}}.{{.dnsZone}}
spec:
  publicKey: {{.publicKey}}